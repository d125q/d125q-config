# -*- mode: sh; -*-

## * Options
setopt nonomatch                # Try to avoid ‘zsh: no matches found...’
setopt NO_clobber               # Warn if file exists
setopt histallowclobber         # Add ‘|’ to output redirections in the history
setopt printexitvalue           # Alert if something failed
setopt interactivecomments      # Allow comments even in interactive shells
stty -ixon                      # CTRL-S will no longer freeze the terminal

## * Prompt (grml-large)
function virtual_env_prompt {
    REPLY=${VIRTUAL_ENV+(${VIRTUAL_ENV:t}) }
}

grml_theme_add_token virtual-env -f virtual_env_prompt '%F{magenta}' '%f'
grml_theme_add_token datetime '%D{%F %T %Z}' '%F{yellow}' '%f'
declare -a left_items=(newline
                       rc jobs history shell-level change-root datetime
                       newline
                       user at host path virtual-env vcs
                       newline
                       percent)
declare -a right_items=(sad-smiley battery)

zstyle ':prompt:grml-large:left:setup' items $left_items
zstyle ':prompt:grml-large:right:setup' items $right_items

## * Syntax highlighting
source ${ZDOTDIR:-$HOME}/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh

## * Completions and key bindings for fzf
if [[ -v FZF_HOME ]] ; then
    # Source the files
    source $FZF_HOME/shell/completion.zsh
    source $FZF_HOME/shell/key-bindings.zsh

    # Bring back the default bindings
    bindkey '^R' history-incremental-pattern-search-backward
    bindkey '^T' transpose-chars
    bindkey '\ec' capitalize-word

    # Disable REPORTTIME for the ZLE widgets defined by fzf
    function d125q-fzf-completion {
        REPORTTIME=-1 fzf-completion
    }
    function d125q-fzf-file-widget {
        REPORTTIME=-1 fzf-file-widget
    }
    function d125q-fzf-cd-widget {
        REPORTTIME=-1 fzf-cd-widget
    }
    zle -N d125q-fzf-completion
    zle -N d125q-fzf-file-widget
    zle -N d125q-fzf-cd-widget

    # Bind the new ZLE widgets
    bindkey '^I' d125q-fzf-completion
    bindkey '^Xx' fzf-history-widget
    bindkey '^X[' d125q-fzf-file-widget
    bindkey '^X,' d125q-fzf-cd-widget

    # Check for fd
    if [[ -v commands[fd] ]] ; then
        # Make fzf use fd
        typeset -gx FZF_CTRL_T_COMMAND="${commands[fd]} -L -H --min-depth 1 -tf -tl" \
                    FZF_ALT_C_COMMAND="${commands[fd]} -L -H --min-depth 1 -td"

        # Define custom ZLE widgets that search from $HOME or from root
        function d125q-fzf-file-widget-home {
            FZF_CTRL_T_COMMAND="$FZF_CTRL_T_COMMAND . '$HOME'" d125q-fzf-file-widget
        }
        function d125q-fzf-file-widget-root {
            FZF_CTRL_T_COMMAND="$FZF_CTRL_T_COMMAND . /bin /etc /opt /usr" d125q-fzf-file-widget
        }
        function d125q-fzf-cd-widget-home {
            FZF_ALT_C_COMMAND="$FZF_ALT_C_COMMAND . '$HOME'" d125q-fzf-cd-widget
        }
        function d125q-fzf-cd-widget-root {
            FZF_ALT_C_COMMAND="$FZF_ALT_C_COMMAND . /bin /etc /opt /usr" d125q-fzf-cd-widget
        }
        zle -N d125q-fzf-file-widget-home
        zle -N d125q-fzf-file-widget-root
        zle -N d125q-fzf-cd-widget-home
        zle -N d125q-fzf-cd-widget-root

        # Bind the custom ZLE widgets
        bindkey '^X]' d125q-fzf-file-widget-home
        bindkey '^X\' d125q-fzf-file-widget-root
        bindkey '^X.' d125q-fzf-cd-widget-home
        bindkey '^X/' d125q-fzf-cd-widget-root
    fi
fi

## * Completions for pip and pipenv
if [[ -v commands[pyenv] ]] ; then
    eval "$( ${commands[pyenv]} exec pip completion --zsh )"
    eval "$( ${commands[pyenv]} exec pipenv --completion )"
fi

## * Initialization of zoxide
if [[ -v commands[zoxide] ]] ; then
    eval "$( ${commands[zoxide]} init zsh )"
fi

## * Aliases and functions

## ** exa -- a modern version of ls
if [[ -v commands[exa] ]] ; then
    alias e="${commands[exa]}"
    alias el="${commands[exa]} -l"
    alias ea="${commands[exa]} -la"
    alias eh="${commands[exa]} -lah"
fi

## ** sudo
if [[ -v commands[sudo] && -v commands[zpass] ]] ; then
    alias sudo="SUDO_ASKPASS=${commands[zpass]} ${commands[sudo]} -A"
fi

## ** Download albums from Bandcamp using youtube-dl
function bandcamp-dl {
    youtube-dl -o '%(artist)s_%(album)s_%(track_number)02d_%(track)s.%(ext)s' $@
}

## ** Run command in each subdirectory
function in-subdirs {
    for subdir in *(/) ; do
        pushd -q $subdir
        $@
        popd -q
    done
}
